-- 1. Employees
CREATE TABLE IF NOT EXISTS employees (
    name TEXT,
    role TEXT,
    location TEXT,
    years_experience TEXT,
    is_active INTEGER,
    current_compensation REAL,
    last_working_day TEXT
);

-- 2. Industry Compensation
CREATE TABLE industry_compensation (
    location TEXT,
    role TEXT,
    avg_compensation REAL
);

-- 3. Employee Ratings
CREATE TABLE employee_ratings (
    name TEXT,
    role TEXT,
    location TEXT,
    yoe TEXT,
    self_rating REAL,
    manager_rating REAL
);




-- Filter employees by role/location

CREATE PROCEDURE FilterEmployees(
    role_filter TEXT DEFAULT NULL, 
    location_filter TEXT DEFAULT NULL,
    include_inactive BOOLEAN DEFAULT FALSE
)
AS
BEGIN
    SELECT e.Name, r.RoleName, l.LocationName, e.CurrentCompensation
    FROM employees e
    JOIN Roles r ON e.RoleID = r.RoleID
    JOIN Locations l ON e.LocationID = l.LocationID
    WHERE (r.RoleName = role_filter OR role_filter IS NULL)
      AND (l.LocationName = location_filter OR location_filter IS NULL)
      AND (e.IsActive = 1 OR include_inactive = TRUE);
END;






-- Calculate Average Compensation by Location:
CREATE PROCEDURE AvgCompByLocation(location_name TEXT)
AS
BEGIN
    SELECT AVG(e.CurrentCompensation) AS AvgComp
    FROM employees e
    JOIN Locations l ON e.LocationID = l.LocationID
    WHERE l.LocationName = location_name AND e.IsActive = 1;
END;






-- Simulate Compensation Adjustments:
CREATE PROCEDURE SimulateIncrement(
    global_increment_pct REAL,
    role_filter TEXT DEFAULT NULL,
    role_increment_pct REAL DEFAULT NULL
)
AS
BEGIN
    SELECT 
        e.Name,
        r.RoleName,
        e.CurrentCompensation,
        e.CurrentCompensation * (1 + 
            CASE 
                WHEN r.RoleName = role_filter THEN role_increment_pct/100 
                ELSE global_increment_pct/100 
            END) AS NewCompensation
    FROM employees e
    JOIN Roles r ON e.RoleID = r.RoleID
    WHERE e.IsActive = 1;
END;

